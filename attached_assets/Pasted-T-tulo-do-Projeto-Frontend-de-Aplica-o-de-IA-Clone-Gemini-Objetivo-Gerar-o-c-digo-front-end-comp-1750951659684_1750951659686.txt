Título do Projeto: Frontend de Aplicação de IA (Clone Gemini)Objetivo: Gerar o código front-end completo e idêntico à interface de chat do Google Gemini, adaptado para três plataformas: Web (Desktop), PWA (Android e iPhone) e Android (Nativo). O design deve ser pixel-perfect com a interface do Gemini, incluindo layout, cores, tipografia, ícones, animações e responsividade.1. Princípios de Design e Estilo (Aplicáveis a Todas as Plataformas)Inspiração Principal: Google Gemini (interface de chat).Tema: Predominantemente modo escuro (#202124 como base, com variações).Tipografia: Fonte Roboto (se disponível, caso contrário, sans-serif similar).Peso da fonte: 300, 400, 700.Tamanhos de fonte: Consistentes para títulos, texto de mensagem, itens de menu.Esquema de Cores (Hex Codes):Fundo Principal (Container): #202124Fundo Sidebar/Cabeçalho Chat/Input Area: #1A1A1D (ligeiramente mais escuro)Fundo Área de Mensagens: #242528 (ligeiramente mais claro que o container)Cor de Texto Padrão: #E8EAED (branco off-white)Fundo Caixa de Input: #303134Cor Principal de Destaque/Botões (Enviar, Novo Chat): #8AB4F8 (azul claro do Google)Cor de Texto em Botões: #1A1A1D (quase preto)Cor Balão Mensagem Usuário: #004D40 (verde escuro sutil)Cor Balão Mensagem IA: #3C4043 (cinza mais claro)Cor Hover/Ativo (Sidebar Items): #3C4043 (mesmo do balão IA)Cor dos Ícones (geral): #8AB4F8 (botões), #E8EAED (sidebar), #8AB4F8 (dentro de avatares).Cantos Arredondados: Presentes em quase todos os elementos (botões, caixas de input, balões de mensagem, containers). Raios de borda suaves (ex: 8px, 10px, 25px para botões grandes).Sombras: Leves sombras para elementos "flutuantes" ou destacados (ex: container principal, caixa de input). box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);Responsividade: O layout deve se adaptar fluidamente a diferentes tamanhos de tela (desktop, tablet, celular), com breakpoints claros (ex: 768px para transição de sidebar).Animações e Transições: Sutis e suaves em estados de hover, cliques e adição de novas mensagens. (Ex: transition: all 0.3s ease;)2. Estrutura de Componentes e Layout (Para Todas as Plataformas)A aplicação será dividida em um layout de duas colunas principais:Sidebar (Esquerda):Largura: Fixa (ex: 280px em desktop), contrai para ícones apenas em mobile (ex: 80px).Conteúdo:Botão "Novo Chat": Topo da sidebar, arredondado, background-color: var(--button-bg), color: var(--button-text), font-weight: bold, com ícone de + e texto "Novo Chat" (texto oculto em mobile).Histórico de Chats: Título "Chats Recentes" (uppercase, opaco). Lista de itens de chat clicáveis. Cada item: ícone de chat, título do chat (truncado com ellipsis se for longo). Estado active e hover com background-color: var(--hover-color).Rodapé da Sidebar: Links "Configurações", "Ajuda", "Mig" (seu nome). Ícones correspondentes e texto (texto oculto em mobile).Borda direita fina e sutil.Área Principal do Chat (Direita):Ocupa o restante da largura da tela (flex-grow: 1).Cabeçalho do Chat: Fundo ligeiramente mais escuro que a área de chat, borda inferior sutil. Título centralizado (ex: "Chat com Mig").Display de Mensagens: Área rolável (overflow-y: auto).Balanços de Mensagem:Layout: Flexbox, alinhamento flex-start para IA, flex-end para Usuário. max-width: 80% (desktop), 90% (mobile).Avatares: Pequenos círculos (width: 30px, height: 30px, border-radius: 50%) com ícone (robô para IA, usuário para você). Alinhados ao topo do balão.Conteúdo do Balão: padding: 12px 18px, border-radius: 18px.Cor: var(--ia-bubble) para IA, var(--user-bubble) para usuário.Nome do Remetente: Pequeno font-weight: bold acima do balão da IA (ex: "Mig").Quebra de linha de texto (word-wrap: break-word).Espaçamento consistente entre balões (gap: 15px).Área de Input de Mensagem: Fixa na parte inferior.Fundo: Mesmo da sidebar/cabeçalho.Textarea (#user-input): flex-grow: 1, background-color: var(--input-bg), color: var(--text-color), border: none, border-radius: 25px. resize: none, outline: none. max-height: 120px, overflow-y: auto. placeholder="Pergunte algo a Mig...".Botão de Enviar (#send-button): Redondo (width: 45px, height: 45px, border-radius: 50%), background-color: var(--button-bg), color: var(--button-text). Ícone de avião de papel (fas fa-paper-plane).3. Especificações Técnicas por PlataformaA. Web (Desktop Browser)Tecnologias:Framework: React (usando Vite para setup rápido).Estilização: Tailwind CSS (preferencialmente para classes utilitárias e responsividade) ou CSS Modules com variáveis CSS para o tema.Ícones: Font Awesome (CDN ou via pacote npm).Gerenciamento de Estado: React Hooks (useState, useContext).Estrutura de Arquivos:/src
    /components
        Sidebar.jsx
        ChatWindow.jsx
        MessageInput.jsx
        MessageBubble.jsx
        // etc.
    /styles
        main.css // Tailwind base ou CSS global
        // CSS Modules para componentes específicos se não usar Tailwind
    App.jsx
    main.jsx // ReactDOM.createRoot
index.html
tailwind.config.js (se usar Tailwind)
Detalhes de Implementação:Todos os componentes devem ser funcionais.Gerenciamento de estado local para o input e a lista de mensagens.Função JavaScript para adicionar mensagens (simuladas) e rolar o chat para o final.Implementar o textarea com auto-redimensionamento.Garantir acessibilidade (elementos clicáveis com estados de foco, etc.).B. PWA (Progressive Web App para Android e iPhone)Tecnologias:Mesmas tecnologias da versão Web (React, Tailwind CSS/CSS Modules).Recursos PWA:Manifest File (manifest.json):name, short_name, start_url, display (standalone), background_color, theme_color.Ícones (icons array) de diversos tamanhos.Service Worker (service-worker.js):Estratégia de Cache-First para assets estáticos (HTML, CSS, JS, imagens, fontes).Offline Fallback para garantir que a página básica carregue mesmo sem internet.Registrar o Service Worker em index.html ou main.jsx.Estrutura de Arquivos: Similar à versão Web, com adição de manifest.json e service-worker.js no diretório raiz ou /public.Detalhes de Implementação:O design responsivo da versão Web deve ser otimizado para toque e tamanhos de tela mobile.Garantir que a "instalação" do PWA funcione corretamente (prompts, etc.).C. Android App (Nativo/Compilado)Tecnologias:Framework: React Native.Estilização: StyleSheet do React Native. Considerar bibliotecas de UI como react-native-paper (que implementa Material Design 3 e pode ser customizado para se aproximar do Gemini) ou construir componentes customizados para corresponder ao design da web.Ícones: react-native-vector-icons ou SVG inlines.Gerenciamento de Estado: React Hooks.Estrutura de Arquivos:/components
    Sidebar.js
    ChatWindow.js
    MessageInput.js
    MessageBubble.js
    // etc.
App.js
index.js
Detalhes de Implementação:Traduzir a estrutura visual para componentes nativos (View, Text, ScrollView, TextInput, TouchableOpacity).Implementar o auto-redimensionamento do TextInput (multiline).Garantir a experiência de scroll suave para mensagens.Tratar o teclado virtual (ajustar layout quando o teclado aparece).Navegação (se necessário, para alternar entre "chats").Focar na fidelidade visual e na experiência de usuário nativa, mantendo a consistência com as versões web.4. Considerações Adicionais para a IA:Comentários no Código: Adicionar comentários explicativos extensivos em todas as partes do código, detalhando a lógica e a função de cada componente/função.Simulação de Dados: Utilizar dados mock para o histórico de chats e mensagens iniciais.Estrutura Modular: Organizar o código em componentes e funções reutilizáveis, seguindo boas práticas de desenvolvimento (ex: React components em arquivos separados).Fidelidade Visual: A prioridade é a replicação visual da interface do Gemini, com atenção aos detalhes de espaçamento, alinhamento, tamanhos e cores exatas conforme especificado.Plataforma de IA: Assuma que a IA tem acesso a bibliotecas e conhecimentos para gerar código funcional e estilos complexos para as tecnologias solicitadas.Este prompt abrangente deve fornecer à IA todas as informações necessárias para gerar um front-end altamente fiel à sua interface, Mig, e que funcione nas plataformas desejadas!